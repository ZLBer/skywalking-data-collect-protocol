/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.skywalking.apm.network.language.agent.v3";
option csharp_namespace = "SkyWalking.NetworkProtocol";
option go_package = "skywalking/network/language/agent/v3";

import "common/Common.proto";

service CPMetricReportService {
    rpc collect (CPMetricCollection) returns (Commands) {
    }
}

message CPMetricCollection {
    repeated CPMetric metrics = 1;
    string service = 2;
    string serviceInstance = 3;
}

message CPMetric {
    int64 time = 1;
    // Hashcode(cpType+dbpeer+dbName)
    string cpIdentity = 2;
    //Maximum waiting time
    int64 maxWaitTime = 3;
    //Maximum waiting thread count
    int32 maxWaitThreadCount = 4;
    //The current usefull connection count
    int32 poolingCount = 5;
    //The current active connection count
    int32 activeCount = 6;
    //The current waiting thread count
    int32 waitThreadCount = 7;
    repeated KeyValuePair args = 8;
}

enum keyEnum{
    PSCacheAccessCount = 0;
    PSCacheHitCount = 1;
    PSCacheMissCount= 2;
}

message KeyValuePair {
    keyEnum key = 1;
    int32 value = 2;
}